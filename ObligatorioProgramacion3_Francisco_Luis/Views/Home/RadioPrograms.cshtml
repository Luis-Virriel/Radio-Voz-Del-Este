@model ObligatorioProgramacion3_Francisco_Luis.Models.RadioProgramsViewModel
@{
	ViewBag.Title = "Programas de Radio - Voz del Este";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="programs-container">
	<div class="programs-header">
		<div class="header-content">
			<h1 class="page-title">
				<i class="fas fa-radio"></i>
				Nuestra Programación
			</h1>
			<p class="page-subtitle">Descubre todos nuestros programas de radio</p>
		</div>

		<!-- Programa Actual Destacado -->
		@if (Model.CurrentProgram != null)
		{
			<div class="current-program-hero">
				<div class="hero-content">
					<div class="hero-badge">
						<span class="live-dot"></span>
						AHORA EN VIVO
					</div>
					<div class="hero-info">
						<h2 class="hero-title">@Model.CurrentProgram.ProgramName</h2>
						<p class="hero-description">@Model.CurrentProgram.RadioDescription</p>
						<div class="hero-time">
							<i class="fas fa-clock"></i>
							@(Model.CurrentProgram.Schedule.HasValue ? Model.CurrentProgram.Schedule.Value.ToString("HH:mm") : DateTime.Now.ToString("HH:mm"))
						</div>
					</div>
				</div>
				<div class="hero-image">
					<img src="@Model.CurrentProgram.ImageURL" alt="@Model.CurrentProgram.ProgramName" />
				</div>
			</div>
		}
	</div>

	<!-- Filtros -->
	<div class="programs-filters">
		<div class="filter-buttons">
			<button class="filter-btn active" data-filter="all">
				<i class="fas fa-th-large"></i>
				Todos (@Model.TotalPrograms)
			</button>
			<button class="filter-btn" data-filter="matutinos">
				<i class="fas fa-sun"></i>
				Matutinos (@Model.MatutinosPrograms.Count)
			</button>
			<button class="filter-btn" data-filter="vespertinos">
				<i class="fas fa-cloud-sun"></i>
				Vespertinos (@Model.VespertinosPrograms.Count)
			</button>
			<button class="filter-btn" data-filter="nocturnos">
				<i class="fas fa-moon"></i>
				Nocturnos (@Model.NocturnosPrograms.Count)
			</button>
			<button class="filter-btn" data-filter="musicales">
				<i class="fas fa-music"></i>
				Musicales (@Model.MusicalesPrograms.Count)
			</button>
			<button class="filter-btn" data-filter="informativos">
				<i class="fas fa-newspaper"></i>
				Informativos (@Model.InformativosPrograms.Count)
			</button>
		</div>

		<div class="search-container">
			<input type="text" id="programSearch" placeholder="Buscar programa..." class="search-input">
			<i class="fas fa-search search-icon"></i>
		</div>
	</div>

	<!-- Grid de Programas -->
	<div class="programs-grid">
		@if (Model.AllPrograms != null && Model.AllPrograms.Any())
		{
			foreach (var program in Model.AllPrograms)
			{
				<div class="program-card" data-category="@GetProgramCategory(program)" data-name="@program.ProgramName.ToLower()">
					<div class="card-image">
						<img src="@program.ImageURL" alt="@program.ProgramName" />
						<div class="card-overlay">
							<div class="overlay-content">
								<i class="fas fa-play-circle play-icon"></i>
								<span class="overlay-text">Ver Detalles</span>
							</div>
						</div>
					</div>
					<div class="card-content">
						<h3 class="card-title">@program.ProgramName</h3>
						<p class="card-description">@program.RadioDescription</p>
						<div class="card-footer">
							<span class="card-category">@GetProgramCategory(program)</span>
							<span class="card-id">ID: @program.ID</span>
						</div>
					</div>
				</div>
			}
		}
		else
		{
			<div class="no-programs">
				<i class="fas fa-radio"></i>
				<h3>No hay programas disponibles</h3>
				<p>Estamos trabajando en nuestra programación. Vuelve pronto.</p>
			</div>
		}
	</div>

	<!-- Estadísticas -->
	<div class="programs-stats">
		<div class="stat-card">
			<div class="stat-icon">
				<i class="fas fa-radio"></i>
			</div>
			<div class="stat-info">
				<div class="stat-number">@Model.TotalPrograms</div>
				<div class="stat-label">Programas Totales</div>
			</div>
		</div>

		<div class="stat-card">
			<div class="stat-icon">
				<i class="fas fa-sun"></i>
			</div>
			<div class="stat-info">
				<div class="stat-number">@Model.MatutinosPrograms.Count</div>
				<div class="stat-label">Matutinos</div>
			</div>
		</div>

		<div class="stat-card">
			<div class="stat-icon">
				<i class="fas fa-music"></i>
			</div>
			<div class="stat-info">
				<div class="stat-number">@Model.MusicalesPrograms.Count</div>
				<div class="stat-label">Musicales</div>
			</div>
		</div>

		<div class="stat-card">
			<div class="stat-icon">
				<i class="fas fa-newspaper"></i>
			</div>
			<div class="stat-info">
				<div class="stat-number">@Model.InformativosPrograms.Count</div>
				<div class="stat-label">Informativos</div>
			</div>
		</div>
	</div>

	<!-- Botón de regreso -->
	<div class="back-to-home">
		<a href="@Url.Action("Index", "Home")" class="back-btn">
			<i class="fas fa-arrow-left"></i>
			Volver al Inicio
		</a>
	</div>
</div>

@functions {
	string GetProgramCategory(dynamic program)
	{
		var description = program.RadioDescription?.ToLower() ?? "";
		var name = program.ProgramName?.ToLower() ?? "";

		if (description.Contains("matutino") || description.Contains("mañana") ||
			name.Contains("desayuno") || name.Contains("buenos días"))
			return "matutinos";

		if (description.Contains("tarde") || name.Contains("tardes"))
			return "vespertinos";

		if (description.Contains("noche") || description.Contains("nocturno") ||
			name.Contains("noche"))
			return "nocturnos";

		if (description.Contains("musical") || description.Contains("música"))
			return "musicales";

		if (description.Contains("informativo") || description.Contains("noticias"))
			return "informativos";

		return "general";
	}
}

<style>
	.programs-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 20px;
	}

	.programs-header {
		text-align: center;
		margin-bottom: 40px;
	}

	.header-content {
		margin-bottom: 30px;
	}

	.page-title {
		font-size: 2.5rem;
		color: #2c3e50;
		margin-bottom: 10px;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 15px;
	}

	.page-subtitle {
		font-size: 1.2rem;
		color: #7f8c8d;
	}

	.current-program-hero {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		border-radius: 20px;
		padding: 30px;
		color: white;
		display: flex;
		align-items: center;
		gap: 30px;
		margin-bottom: 30px;
		box-shadow: 0 10px 30px rgba(0,0,0,0.2);
	}

	.hero-content {
		flex: 1;
	}

	.hero-badge {
		display: inline-flex;
		align-items: center;
		gap: 8px;
		background: #e74c3c;
		padding: 6px 12px;
		border-radius: 20px;
		font-size: 0.8rem;
		font-weight: bold;
		margin-bottom: 15px;
	}

	.hero-title {
		font-size: 2rem;
		margin-bottom: 10px;
	}

	.hero-description {
		font-size: 1.1rem;
		margin-bottom: 15px;
		opacity: 0.9;
	}

	.hero-time {
		display: flex;
		align-items: center;
		gap: 8px;
		font-size: 1rem;
	}

	.hero-image {
		width: 120px;
		height: 120px;
		border-radius: 15px;
		overflow: hidden;
		box-shadow: 0 5px 20px rgba(0,0,0,0.3);
	}

		.hero-image img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

	.programs-filters {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 30px;
		flex-wrap: wrap;
		gap: 20px;
	}

	.filter-buttons {
		display: flex;
		gap: 10px;
		flex-wrap: wrap;
	}

	.filter-btn {
		background: #ecf0f1;
		border: none;
		padding: 10px 20px;
		border-radius: 25px;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		gap: 8px;
		font-size: 0.9rem;
	}

		.filter-btn:hover {
			background: #bdc3c7;
		}

		.filter-btn.active {
			background: #3498db;
			color: white;
		}

	.search-container {
		position: relative;
	}

	.search-input {
		padding: 10px 40px 10px 15px;
		border: 2px solid #ecf0f1;
		border-radius: 25px;
		font-size: 0.9rem;
		min-width: 250px;
	}

	.search-icon {
		position: absolute;
		right: 15px;
		top: 50%;
		transform: translateY(-50%);
		color: #7f8c8d;
	}

	.programs-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 25px;
		margin-bottom: 40px;
	}

	.program-card {
		background: white;
		border-radius: 15px;
		overflow: hidden;
		box-shadow: 0 5px 20px rgba(0,0,0,0.1);
		transition: all 0.3s ease;
		cursor: pointer;
	}

		.program-card:hover {
			transform: translateY(-5px);
			box-shadow: 0 15px 40px rgba(0,0,0,0.2);
		}

	.card-image {
		position: relative;
		height: 200px;
		overflow: hidden;
	}

		.card-image img {
			width: 100%;
			height: 100%;
			object-fit: cover;
			transition: transform 0.3s ease;
		}

	.program-card:hover .card-image img {
		transform: scale(1.1);
	}

	.card-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0,0,0,0.7);
		display: flex;
		align-items: center;
		justify-content: center;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.program-card:hover .card-overlay {
		opacity: 1;
	}

	.overlay-content {
		text-align: center;
		color: white;
	}

	.play-icon {
		font-size: 3rem;
		margin-bottom: 10px;
	}

	.overlay-text {
		font-size: 1.1rem;
		font-weight: 500;
	}

	.card-content {
		padding: 20px;
	}

	.card-title {
		font-size: 1.3rem;
		color: #2c3e50;
		margin-bottom: 10px;
	}

	.card-description {
		color: #7f8c8d;
		font-size: 0.9rem;
		line-height: 1.5;
		margin-bottom: 15px;
	}

	.card-footer {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.card-category {
		background: #3498db;
		color: white;
		padding: 5px 12px;
		border-radius: 15px;
		font-size: 0.8rem;
		font-weight: 500;
	}

	.card-id {
		color: #95a5a6;
		font-size: 0.8rem;
	}

	.programs-stats {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 20px;
		margin-bottom: 40px;
	}

	.stat-card {
		background: white;
		border-radius: 15px;
		padding: 20px;
		text-align: center;
		box-shadow: 0 5px 20px rgba(0,0,0,0.1);
		transition: all 0.3s ease;
	}

		.stat-card:hover {
			transform: translateY(-3px);
			box-shadow: 0 10px 30px rgba(0,0,0,0.2);
		}

	.stat-icon {
		width: 60px;
		height: 60px;
		border-radius: 50%;
		background: #3498db;
		color: white;
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 0 auto 15px;
		font-size: 1.5rem;
	}

	.stat-number {
		font-size: 2rem;
		font-weight: bold;
		color: #2c3e50;
		margin-bottom: 5px;
	}

	.stat-label {
		color: #7f8c8d;
		font-size: 0.9rem;
	}

	.no-programs {
		text-align: center;
		padding: 60px 20px;
		color: #7f8c8d;
		grid-column: 1 / -1;
	}

		.no-programs i {
			font-size: 4rem;
			margin-bottom: 20px;
			color: #bdc3c7;
		}

		.no-programs h3 {
			font-size: 1.5rem;
			margin-bottom: 10px;
			color: #95a5a6;
		}

	.back-to-home {
		text-align: center;
		margin-top: 40px;
	}

	.back-btn {
		display: inline-flex;
		align-items: center;
		gap: 10px;
		background: #3498db;
		color: white;
		padding: 15px 30px;
		border-radius: 25px;
		text-decoration: none;
		font-size: 1.1rem;
		transition: all 0.3s ease;
	}

		.back-btn:hover {
			background: #2980b9;
			text-decoration: none;
			color: white;
			transform: translateY(-2px);
		}

	.live-dot {
		width: 8px;
		height: 8px;
		background: white;
		border-radius: 50%;
		animation: pulse-dot 1.5s infinite;
	}

	/* Animaciones */
	@@keyframes pulse-dot {
		0%, 100% {
			opacity: 1;
		}

		50% {
			opacity: 0.5;
		}
	}

	@@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(20px);
		}

		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.program-card {
		animation: fadeIn 0.5s ease-out;
	}

		.program-card.hidden {
			display: none;
		}

	/* Responsive */
	@@media (max-width: 768px) {
		.programs-filters {
			flex-direction: column;
			align-items: stretch;
		}

		.filter-buttons {
			justify-content: center;
		}

		.search-input {
			min-width: 100%;
		}

		.current-program-hero {
			flex-direction: column;
			text-align: center;
		}

		.hero-image {
			margin-top: 20px;
		}

		.programs-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const filterButtons = document.querySelectorAll('.filter-btn');
		const programCards = document.querySelectorAll('.program-card');
		const searchInput = document.getElementById('programSearch');

		// Función para filtrar programas
		function filterPrograms(category) {
			programCards.forEach(card => {
				const cardCategory = card.getAttribute('data-category');

				if (category === 'all' || cardCategory === category) {
					card.classList.remove('hidden');
				} else {
					card.classList.add('hidden');
				}
			});
		}

		// Función para buscar programas
		function searchPrograms(searchTerm) {
			programCards.forEach(card => {
				const cardName = card.getAttribute('data-name');
				const cardTitle = card.querySelector('.card-title').textContent.toLowerCase();
				const cardDescription = card.querySelector('.card-description').textContent.toLowerCase();

				if (cardName.includes(searchTerm) ||
					cardTitle.includes(searchTerm) ||
					cardDescription.includes(searchTerm)) {
					card.classList.remove('hidden');
				} else {
					card.classList.add('hidden');
				}
			});
		}

		// Event listeners para filtros
		filterButtons.forEach(button => {
			button.addEventListener('click', function () {
				filterButtons.forEach(btn => btn.classList.remove('active'));
				this.classList.add('active');

				const category = this.getAttribute('data-filter');
				filterPrograms(category);

				searchInput.value = '';
			});
		});

		// Event listener para búsqueda
		searchInput.addEventListener('input', function () {
			const searchTerm = this.value.toLowerCase();

			if (searchTerm === '') {
				filterPrograms('all');

				const activeFilter = document.querySelector('.filter-btn.active');
				if (activeFilter) {
					const category = activeFilter.getAttribute('data-filter');
					filterPrograms(category);
				}
			} else {
				filterButtons.forEach(btn => btn.classList.remove('active'));
				document.querySelector('.filter-btn[data-filter="all"]').classList.add('active');

				searchPrograms(searchTerm);
			}
		});

		// Efectos hover para las tarjetas
		programCards.forEach(card => {
			card.addEventListener('mouseenter', function () {
				this.style.transform = 'translateY(-8px) scale(1.02)';
			});

			card.addEventListener('mouseleave', function () {
				this.style.transform = 'translateY(0) scale(1)';
			});

			// Efecto de click
			card.addEventListener('click', function () {
				this.style.transform = 'scale(0.98)';

				setTimeout(() => {
					this.style.transform = 'translateY(-5px) scale(1)';

					const programName = this.querySelector('.card-title').textContent;
					console.log('Programa seleccionado:', programName);

					alert('Detalles del programa: ' + programName);
				}, 150);
			});
		});

		// Animación de entrada para las tarjetas
		programCards.forEach((card, index) => {
			card.style.animationDelay = `${index * 0.1}s`;
		});

		// Efecto de contador para las estadísticas
		const statNumbers = document.querySelectorAll('.stat-number');

		statNumbers.forEach(stat => {
			const finalValue = parseInt(stat.textContent);
			if (finalValue > 0) {
				let currentValue = 0;
				const increment = Math.ceil(finalValue / 20);

				const counter = setInterval(() => {
					currentValue += increment;
					if (currentValue >= finalValue) {
						currentValue = finalValue;
						clearInterval(counter);
					}
					stat.textContent = currentValue;
				}, 50);
			}
		});

		// Efecto de scroll suave para volver al inicio
		const backBtn = document.querySelector('.back-btn');
		if (backBtn) {
			backBtn.addEventListener('click', function (e) {
				e.preventDefault();

				this.style.transform = 'scale(0.95)';

				setTimeout(() => {
					window.location.href = this.href;
				}, 200);
			});
		}
	});
</script>

@section scripts {
	<script>
		console.log('Vista de RadioPrograms cargada correctamente');
	</script>
}