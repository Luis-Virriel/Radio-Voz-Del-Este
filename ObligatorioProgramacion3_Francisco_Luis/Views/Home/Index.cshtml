@model ObligatorioProgramacion3_Francisco_Luis.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Voz del Este";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="bg-dark text-light min-vh-100">
    <!-- Header minimalista con widgets en extremos -->
    <div class="container-fluid py-4">
        <div class="row align-items-center">
            <!-- Widget del Clima - Extremo izquierdo -->
            <div class="col-auto">
                <a href="@Url.Action("Weather", "Home")" class="text-decoration-none">
                    <div class="widget-minimal clima-widget">
                        <div class="d-flex align-items-center gap-2">
                            <span class="weather-icon">🌤️</span>
                            <div>
                                @if (Model.HasWeatherData)
                                {
                                    <div class="temp-display">@Model.CurrentTemperature</div>
                                    <small class="weather-desc">@Model.CurrentDescription</small>
                                }
                                else
                                {
                                    <div class="temp-display">--°</div>
                                    <small class="weather-desc">Sin datos</small>
                                }
                            </div>
                        </div>
                    </div>
                </a>
            </div>

            <!-- Logo/Título centrado -->
            <div class="col text-center">
                <h1 class="radio-title">Voz del Este</h1>
            </div>

            <!-- Widget de Moneda - Extremo derecho -->
            <div class="col-auto">
                <a href="@Url.Action("Currency", "Home")" class="text-decoration-none">
                    <div class="widget-minimal moneda-widget">
                        <div class="d-flex align-items-center gap-2">
                            <span class="currency-icon">💲</span>
                            <div>
                                @if (Model.HasCurrencyData && Model.CurrencyData.Quotes.ContainsKey("USDUYU"))
                                {
                                    <div class="currency-display">$@Model.CurrencyData.Quotes["USDUYU"].ToString("0.00")</div>
                                    <small class="currency-desc">USD/UYU</small>
                                }
                                else
                                {
                                    <div class="currency-display">$--</div>
                                    <small class="currency-desc">Sin datos</small>
                                }
                            </div>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    </div>

    <!-- Sección principal - Audio centrado -->
    <div class="container-fluid">
        <div class="row justify-content-center mb-5">
            <div class="col-md-6 col-lg-4 text-center">
                <div class="audio-container">
                    <div class="live-indicator mb-3">
                        <span class="live-dot"></span>
                        <span class="live-text">EN VIVO</span>
                    </div>
                    <audio id="radio-player" controls class="modern-audio">
                        <source src="https://metropolis-web-1.nty.uy" type="audio/mpeg" />
                        Tu navegador no soporta audio.
                    </audio>
                </div>
            </div>
        </div>

        <!-- Programa actual - Minimalista -->
        <div class="row justify-content-center mb-5">
            <div class="col-md-8 col-lg-6">
                @if (Model.CurrentProgram != null)
                {
                    <div class="current-program">
                        <div class="program-info text-center">
                            <h3 class="program-title">@Model.CurrentProgram.ProgramName</h3>
                            <p class="program-desc">@Model.CurrentProgram.RadioDescription</p>
                            <div class="program-time">@(Model.CurrentProgram.Schedule.HasValue ? Model.CurrentProgram.Schedule.Value.ToString("HH:mm") : "")</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="current-program text-center">
                        <h3 class="program-title text-muted">Sin programa en vivo</h3>
                    </div>
                }
            </div>
        </div>

        <!-- Próximo programa -->
        @if (Model.NextProgram != null)
        {
            <div class="row justify-content-center mb-5">
                <div class="col-md-6 col-lg-4 text-center">
                    <div class="next-program">
                        <small class="next-label">PRÓXIMO</small>
                        <div class="next-title">@Model.NextProgram.ProgramName</div>
                        <div class="next-time">@(Model.NextProgram.Schedule.HasValue ? Model.NextProgram.Schedule.Value.ToString("HH:mm") : "")</div>
                    </div>
                </div>
            </div>
        }

        <!-- Programación simplificada -->
        @if (Model.ProgramsList != null && Model.ProgramsList.Any())
        {
            <div class="row justify-content-center mb-5">
                <div class="col-md-8 col-lg-6">
                    <div class="schedule-minimal">
                        <h4 class="schedule-title text-center mb-4">Programación de Hoy</h4>
                        <div class="schedule-list">
                            @foreach (var program in Model.ProgramsList.Take(5))
                            {
                                <div class="schedule-item-minimal">
                                    <span class="schedule-name">@program.ProgramName</span>
                                    <span class="schedule-time">@(program.Schedule.HasValue ? program.Schedule.Value.ToString("HH:mm") : "--:--")</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Auspiciantes minimalista -->
        @if (Model.AuspiciantesLogos != null && Model.AuspiciantesLogos.Any())
        {
            <div class="row justify-content-center pb-5">
                <div class="col-auto text-center">
                    <div class="sponsors-minimal">
                        <img id="sponsor-logo" src="@Model.AuspiciantesLogos[0]" alt="Auspiciante" class="sponsor-img">
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Estilos minimalistas -->
<style>
    /* Variables CSS */
    :root {
        --primary-blue: #3498db;
        --primary-green: #2ecc71;
        --text-light: #ecf0f1;
        --text-muted: #95a5a6;
        --bg-dark: #1a1a1a;
        --accent: #e74c3c;
    }

    /* Título principal */
    .radio-title {
        font-size: 2.5rem;
        font-weight: 300;
        letter-spacing: 2px;
        color: var(--text-light);
        margin: 0;
    }

    /* Widgets minimalistas */
    .widget-minimal {
        padding: 15px 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 50px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .widget-minimal:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
    }

    .clima-widget .weather-icon,
    .moneda-widget .currency-icon {
        font-size: 1.5rem;
    }

    .temp-display,
    .currency-display {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-light);
        line-height: 1;
    }

    .weather-desc,
    .currency-desc {
        font-size: 0.75rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Indicador en vivo */
    .live-indicator {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .live-dot {
        width: 8px;
        height: 8px;
        background: var(--accent);
        border-radius: 50%;
        animation: pulse 1.5s infinite;
    }

    .live-text {
        font-size: 0.8rem;
        font-weight: 600;
        color: var(--accent);
        letter-spacing: 1px;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.3; }
    }

    /* Audio moderno */
    .modern-audio {
        width: 100%;
        max-width: 350px;
        height: 50px;
        border-radius: 25px;
        background: rgba(255, 255, 255, 0.1);
        outline: none;
    }

    /* Programa actual */
    .current-program {
        padding: 30px;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .program-title {
        font-size: 1.8rem;
        font-weight: 300;
        color: var(--text-light);
        margin-bottom: 15px;
    }

    .program-desc {
        color: var(--text-muted);
        font-size: 1rem;
        margin-bottom: 20px;
        line-height: 1.5;
    }

    .program-time {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary-blue);
    }

    /* Próximo programa */
    .next-program {
        padding: 20px;
        background: rgba(46, 204, 113, 0.1);
        border-radius: 15px;
        border: 1px solid rgba(46, 204, 113, 0.2);
    }

    .next-label {
        font-size: 0.7rem;
        color: var(--primary-green);
        font-weight: 600;
        letter-spacing: 1px;
    }

    .next-title {
        font-size: 1.2rem;
        color: var(--text-light);
        margin: 8px 0;
    }

    .next-time {
        font-size: 1rem;
        color: var(--primary-green);
        font-weight: 600;
    }

    /* Programación */
    .schedule-title {
        font-size: 1.5rem;
        font-weight: 300;
        color: var(--text-light);
    }

    .schedule-list {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 15px;
        padding: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .schedule-item-minimal {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.2s ease;
    }

    .schedule-item-minimal:last-child {
        border-bottom: none;
    }

    .schedule-item-minimal:hover {
        background: rgba(255, 255, 255, 0.05);
        margin: 0 -10px;
        padding: 12px 10px;
        border-radius: 8px;
    }

    .schedule-name {
        color: var(--text-light);
        font-size: 0.95rem;
    }

    .schedule-time {
        color: var(--primary-blue);
        font-weight: 600;
        font-size: 0.9rem;
    }

    /* Auspiciantes */
    .sponsor-img {
        max-height: 60px;
        max-width: 150px;
        object-fit: contain;
        opacity: 0.7;
        transition: all 0.3s ease;
        filter: grayscale(100%);
    }

    .sponsor-img:hover {
        opacity: 1;
        filter: grayscale(0%);
        transform: scale(1.05);
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .radio-title {
            font-size: 1.8rem;
        }

        .widget-minimal {
            padding: 10px 15px;
        }

        .temp-display,
        .currency-display {
            font-size: 1rem;
        }

        .program-title {
            font-size: 1.4rem;
        }

        .schedule-item-minimal {
            flex-direction: column;
            gap: 5px;
            text-align: center;
        }
    }
</style>

@section scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Animación de logos de auspiciantes
            var logos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuspiciantesLogos));
            var index = 0;
            var img = document.getElementById('sponsor-logo');

            if (logos && logos.length > 1 && img) {
                setInterval(function() {
                    index = (index + 1) % logos.length;

                    img.style.opacity = '0';
                    img.style.transition = 'opacity 0.5s ease';

                    setTimeout(function() {
                        img.src = logos[index];
                        img.style.opacity = '0.7';
                    }, 500);
                }, 5000);
            }

            // Efecto de hover suave en widgets
            const widgets = document.querySelectorAll('.widget-minimal');
            widgets.forEach(widget => {
                widget.addEventListener('mouseenter', function() {
                    this.style.boxShadow = '0 10px 30px rgba(0,0,0,0.3)';
                });

                widget.addEventListener('mouseleave', function() {
                    this.style.boxShadow = 'none';
                });
            });
        });
    </script>
}